package index

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/danisla/esio/models"
)

/*PostStartEndOK All indices in [start,end] range are availble and ready.

swagger:response postStartEndOK
*/
type PostStartEndOK struct {

	// In: body
	Payload *models.Ready `json:"body,omitempty"`
}

// NewPostStartEndOK creates PostStartEndOK with default headers values
func NewPostStartEndOK() *PostStartEndOK {
	return &PostStartEndOK{}
}

// WithPayload adds the payload to the post start end o k response
func (o *PostStartEndOK) WithPayload(payload *models.Ready) *PostStartEndOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post start end o k response
func (o *PostStartEndOK) SetPayload(payload *models.Ready) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostStartEndOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostStartEndAccepted Index restore started

swagger:response postStartEndAccepted
*/
type PostStartEndAccepted struct {

	// In: body
	Payload *models.Started `json:"body,omitempty"`
}

// NewPostStartEndAccepted creates PostStartEndAccepted with default headers values
func NewPostStartEndAccepted() *PostStartEndAccepted {
	return &PostStartEndAccepted{}
}

// WithPayload adds the payload to the post start end accepted response
func (o *PostStartEndAccepted) WithPayload(payload *models.Started) *PostStartEndAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post start end accepted response
func (o *PostStartEndAccepted) SetPayload(payload *models.Started) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostStartEndAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostStartEndPartialContent Zero or more of the indices in the [start,end] range are available and ready.

swagger:response postStartEndPartialContent
*/
type PostStartEndPartialContent struct {

	// In: body
	Payload *models.Partial `json:"body,omitempty"`
}

// NewPostStartEndPartialContent creates PostStartEndPartialContent with default headers values
func NewPostStartEndPartialContent() *PostStartEndPartialContent {
	return &PostStartEndPartialContent{}
}

// WithPayload adds the payload to the post start end partial content response
func (o *PostStartEndPartialContent) WithPayload(payload *models.Partial) *PostStartEndPartialContent {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post start end partial content response
func (o *PostStartEndPartialContent) SetPayload(payload *models.Partial) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostStartEndPartialContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(206)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostStartEndBadRequest invalid time range provided

swagger:response postStartEndBadRequest
*/
type PostStartEndBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostStartEndBadRequest creates PostStartEndBadRequest with default headers values
func NewPostStartEndBadRequest() *PostStartEndBadRequest {
	return &PostStartEndBadRequest{}
}

// WithPayload adds the payload to the post start end bad request response
func (o *PostStartEndBadRequest) WithPayload(payload *models.Error) *PostStartEndBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post start end bad request response
func (o *PostStartEndBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostStartEndBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostStartEndNotFound Indices in the [start,end] range are available for restore but not available.

swagger:response postStartEndNotFound
*/
type PostStartEndNotFound struct {

	// In: body
	Payload *models.NotReady `json:"body,omitempty"`
}

// NewPostStartEndNotFound creates PostStartEndNotFound with default headers values
func NewPostStartEndNotFound() *PostStartEndNotFound {
	return &PostStartEndNotFound{}
}

// WithPayload adds the payload to the post start end not found response
func (o *PostStartEndNotFound) WithPayload(payload *models.NotReady) *PostStartEndNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post start end not found response
func (o *PostStartEndNotFound) SetPayload(payload *models.NotReady) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostStartEndNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostStartEndRequestRangeNotSatisfiable No indices are available for restore in given [start,end] range.

swagger:response postStartEndRequestRangeNotSatisfiable
*/
type PostStartEndRequestRangeNotSatisfiable struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostStartEndRequestRangeNotSatisfiable creates PostStartEndRequestRangeNotSatisfiable with default headers values
func NewPostStartEndRequestRangeNotSatisfiable() *PostStartEndRequestRangeNotSatisfiable {
	return &PostStartEndRequestRangeNotSatisfiable{}
}

// WithPayload adds the payload to the post start end request range not satisfiable response
func (o *PostStartEndRequestRangeNotSatisfiable) WithPayload(payload *models.Error) *PostStartEndRequestRangeNotSatisfiable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post start end request range not satisfiable response
func (o *PostStartEndRequestRangeNotSatisfiable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostStartEndRequestRangeNotSatisfiable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(416)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostStartEndDefault Unexpected error

swagger:response postStartEndDefault
*/
type PostStartEndDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostStartEndDefault creates PostStartEndDefault with default headers values
func NewPostStartEndDefault(code int) *PostStartEndDefault {
	if code <= 0 {
		code = 500
	}

	return &PostStartEndDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post start end default response
func (o *PostStartEndDefault) WithStatusCode(code int) *PostStartEndDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post start end default response
func (o *PostStartEndDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post start end default response
func (o *PostStartEndDefault) WithPayload(payload *models.Error) *PostStartEndDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post start end default response
func (o *PostStartEndDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostStartEndDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
