package index

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostStartEndHandlerFunc turns a function with the right signature into a post start end handler
type PostStartEndHandlerFunc func(PostStartEndParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostStartEndHandlerFunc) Handle(params PostStartEndParams) middleware.Responder {
	return fn(params)
}

// PostStartEndHandler interface for that can handle valid post start end params
type PostStartEndHandler interface {
	Handle(PostStartEndParams) middleware.Responder
}

// NewPostStartEnd creates a new http.Handler for the post start end operation
func NewPostStartEnd(ctx *middleware.Context, handler PostStartEndHandler) *PostStartEnd {
	return &PostStartEnd{Context: ctx, Handler: handler}
}

/*PostStartEnd swagger:route POST /{start}/{end} index postStartEnd

PostStartEnd post start end API

*/
type PostStartEnd struct {
	Context *middleware.Context
	Handler PostStartEndHandler
}

func (o *PostStartEnd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostStartEndParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
