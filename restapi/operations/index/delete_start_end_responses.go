package index

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/danisla/esio/models"
)

/*DeleteStartEndOK All indices in [start,end] range are no longer online.

swagger:response deleteStartEndOK
*/
type DeleteStartEndOK struct {

	// In: body
	Payload *models.IndiceStatus `json:"body,omitempty"`
}

// NewDeleteStartEndOK creates DeleteStartEndOK with default headers values
func NewDeleteStartEndOK() *DeleteStartEndOK {
	return &DeleteStartEndOK{}
}

// WithPayload adds the payload to the delete start end o k response
func (o *DeleteStartEndOK) WithPayload(payload *models.IndiceStatus) *DeleteStartEndOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete start end o k response
func (o *DeleteStartEndOK) SetPayload(payload *models.IndiceStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStartEndOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteStartEndAccepted Index delete started

swagger:response deleteStartEndAccepted
*/
type DeleteStartEndAccepted struct {

	// In: body
	Payload *models.IndiceStatus `json:"body,omitempty"`
}

// NewDeleteStartEndAccepted creates DeleteStartEndAccepted with default headers values
func NewDeleteStartEndAccepted() *DeleteStartEndAccepted {
	return &DeleteStartEndAccepted{}
}

// WithPayload adds the payload to the delete start end accepted response
func (o *DeleteStartEndAccepted) WithPayload(payload *models.IndiceStatus) *DeleteStartEndAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete start end accepted response
func (o *DeleteStartEndAccepted) SetPayload(payload *models.IndiceStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStartEndAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteStartEndBadRequest invalid time range provided

swagger:response deleteStartEndBadRequest
*/
type DeleteStartEndBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteStartEndBadRequest creates DeleteStartEndBadRequest with default headers values
func NewDeleteStartEndBadRequest() *DeleteStartEndBadRequest {
	return &DeleteStartEndBadRequest{}
}

// WithPayload adds the payload to the delete start end bad request response
func (o *DeleteStartEndBadRequest) WithPayload(payload *models.Error) *DeleteStartEndBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete start end bad request response
func (o *DeleteStartEndBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStartEndBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteStartEndRequestRangeNotSatisfiable Not all indices in given [start,end] range were found to delete or were actively being restored.

swagger:response deleteStartEndRequestRangeNotSatisfiable
*/
type DeleteStartEndRequestRangeNotSatisfiable struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteStartEndRequestRangeNotSatisfiable creates DeleteStartEndRequestRangeNotSatisfiable with default headers values
func NewDeleteStartEndRequestRangeNotSatisfiable() *DeleteStartEndRequestRangeNotSatisfiable {
	return &DeleteStartEndRequestRangeNotSatisfiable{}
}

// WithPayload adds the payload to the delete start end request range not satisfiable response
func (o *DeleteStartEndRequestRangeNotSatisfiable) WithPayload(payload *models.Error) *DeleteStartEndRequestRangeNotSatisfiable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete start end request range not satisfiable response
func (o *DeleteStartEndRequestRangeNotSatisfiable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStartEndRequestRangeNotSatisfiable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(416)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteStartEndDefault Unexpected error

swagger:response deleteStartEndDefault
*/
type DeleteStartEndDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteStartEndDefault creates DeleteStartEndDefault with default headers values
func NewDeleteStartEndDefault(code int) *DeleteStartEndDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteStartEndDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete start end default response
func (o *DeleteStartEndDefault) WithStatusCode(code int) *DeleteStartEndDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete start end default response
func (o *DeleteStartEndDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete start end default response
func (o *DeleteStartEndDefault) WithPayload(payload *models.Error) *DeleteStartEndDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete start end default response
func (o *DeleteStartEndDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStartEndDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
